// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  fullName       String
  email          String    @unique
  password       String
  avatarUrl      String?
  description    String?
  location       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  followers      Follows[] @relation("following")
  following      Follows[] @relation("follower")
  createdComment Comment[]
  createdPost    Post[]
  Like           Like[]
}

model Follows {
  id          String @id @default(uuid())
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Post {
  id             String    @id @default(uuid())
  text           String
  user           User      @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime  @default(now())
  createdComment Comment[]

  likes Like[]
}

model Like {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}
